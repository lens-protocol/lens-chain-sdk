/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common';

export declare namespace LensERC1155 {
  export type TokenParamsStruct = {
    metadataURI: string;
    maxSupply: BigNumberish;
    mintRate: BigNumberish;
  };

  export type TokenParamsStructOutput = [
    metadataURI: string,
    maxSupply: bigint,
    mintRate: bigint,
  ] & { metadataURI: string; maxSupply: bigint; mintRate: bigint };
}

export declare namespace BaseToken {
  export type MinterStruct = { addr: AddressLike; label: string };

  export type MinterStructOutput = [addr: string, label: string] & {
    addr: string;
    label: string;
  };
}

export declare namespace LensERC20 {
  export type TokenParamsStruct = {
    decimals: BigNumberish;
    name: string;
    symbol: string;
    iconURI: string;
    maxSupply: BigNumberish;
    mintRate: BigNumberish;
  };

  export type TokenParamsStructOutput = [
    decimals: bigint,
    name: string,
    symbol: string,
    iconURI: string,
    maxSupply: bigint,
    mintRate: bigint,
  ] & {
    decimals: bigint;
    name: string;
    symbol: string;
    iconURI: string;
    maxSupply: bigint;
    mintRate: bigint;
  };
}

export declare namespace LensERC721 {
  export type TokenParamsStruct = {
    name: string;
    symbol: string;
    iconURI: string;
    maxSupply: BigNumberish;
    mintRate: BigNumberish;
  };

  export type TokenParamsStructOutput = [
    name: string,
    symbol: string,
    iconURI: string,
    maxSupply: bigint,
    mintRate: bigint,
  ] & {
    name: string;
    symbol: string;
    iconURI: string;
    maxSupply: bigint;
    mintRate: bigint;
  };
}

export interface LensTokenFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'MINT_RATE_COOLDOWN'
      | 'createERC1155'
      | 'createERC20'
      | 'createERC721'
      | 'getTokens'
      | 'initialize'
      | 'owner'
      | 'renounceOwnership'
      | 'revision'
      | 'tokens'
      | 'transferOwnership',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'Initialized'
      | 'Lens_Token_ERC1155Created'
      | 'Lens_Token_ERC20Created'
      | 'Lens_Token_ERC721Created'
      | 'OwnershipTransferred',
  ): EventFragment;

  encodeFunctionData(functionFragment: 'MINT_RATE_COOLDOWN', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'createERC1155',
    values: [AddressLike, LensERC1155.TokenParamsStruct, AddressLike[], BaseToken.MinterStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'createERC20',
    values: [AddressLike, LensERC20.TokenParamsStruct, AddressLike[], BaseToken.MinterStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'createERC721',
    values: [AddressLike, LensERC721.TokenParamsStruct, AddressLike[], BaseToken.MinterStruct[]],
  ): string;
  encodeFunctionData(functionFragment: 'getTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'revision', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: 'MINT_RATE_COOLDOWN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createERC1155', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createERC721', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revision', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Lens_Token_ERC1155CreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    owner: AddressLike,
    metadataURI: string,
    maxSupply: BigNumberish,
    mintRate: BigNumberish,
  ];
  export type OutputTuple = [
    tokenAddress: string,
    owner: string,
    metadataURI: string,
    maxSupply: bigint,
    mintRate: bigint,
  ];
  export interface OutputObject {
    tokenAddress: string;
    owner: string;
    metadataURI: string;
    maxSupply: bigint;
    mintRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Lens_Token_ERC20CreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    owner: AddressLike,
    name: string,
    symbol: string,
    decimals: BigNumberish,
    iconURI: string,
    maxSupply: BigNumberish,
    mintRate: BigNumberish,
  ];
  export type OutputTuple = [
    tokenAddress: string,
    owner: string,
    name: string,
    symbol: string,
    decimals: bigint,
    iconURI: string,
    maxSupply: bigint,
    mintRate: bigint,
  ];
  export interface OutputObject {
    tokenAddress: string;
    owner: string;
    name: string;
    symbol: string;
    decimals: bigint;
    iconURI: string;
    maxSupply: bigint;
    mintRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Lens_Token_ERC721CreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    owner: AddressLike,
    name: string,
    symbol: string,
    iconURI: string,
    maxSupply: BigNumberish,
    mintRate: BigNumberish,
  ];
  export type OutputTuple = [
    tokenAddress: string,
    owner: string,
    name: string,
    symbol: string,
    iconURI: string,
    maxSupply: bigint,
    mintRate: bigint,
  ];
  export interface OutputObject {
    tokenAddress: string;
    owner: string;
    name: string;
    symbol: string;
    iconURI: string;
    maxSupply: bigint;
    mintRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LensTokenFactory extends BaseContract {
  connect(runner?: ContractRunner | null): LensTokenFactory;
  waitForDeployment(): Promise<this>;

  interface: LensTokenFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  MINT_RATE_COOLDOWN: TypedContractMethod<[], [bigint], 'view'>;

  createERC1155: TypedContractMethod<
    [
      initialOwner: AddressLike,
      params: LensERC1155.TokenParamsStruct,
      admins: AddressLike[],
      minters: BaseToken.MinterStruct[],
    ],
    [string],
    'nonpayable'
  >;

  createERC20: TypedContractMethod<
    [
      initialOwner: AddressLike,
      params: LensERC20.TokenParamsStruct,
      admins: AddressLike[],
      minters: BaseToken.MinterStruct[],
    ],
    [string],
    'nonpayable'
  >;

  createERC721: TypedContractMethod<
    [
      initialOwner: AddressLike,
      params: LensERC721.TokenParamsStruct,
      admins: AddressLike[],
      minters: BaseToken.MinterStruct[],
    ],
    [string],
    'nonpayable'
  >;

  getTokens: TypedContractMethod<[], [string[]], 'view'>;

  initialize: TypedContractMethod<[initialOwner: AddressLike], [void], 'nonpayable'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  revision: TypedContractMethod<[], [bigint], 'view'>;

  tokens: TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'MINT_RATE_COOLDOWN'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'createERC1155',
  ): TypedContractMethod<
    [
      initialOwner: AddressLike,
      params: LensERC1155.TokenParamsStruct,
      admins: AddressLike[],
      minters: BaseToken.MinterStruct[],
    ],
    [string],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'createERC20',
  ): TypedContractMethod<
    [
      initialOwner: AddressLike,
      params: LensERC20.TokenParamsStruct,
      admins: AddressLike[],
      minters: BaseToken.MinterStruct[],
    ],
    [string],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'createERC721',
  ): TypedContractMethod<
    [
      initialOwner: AddressLike,
      params: LensERC721.TokenParamsStruct,
      admins: AddressLike[],
      minters: BaseToken.MinterStruct[],
    ],
    [string],
    'nonpayable'
  >;
  getFunction(nameOrSignature: 'getTokens'): TypedContractMethod<[], [string[]], 'view'>;
  getFunction(
    nameOrSignature: 'initialize',
  ): TypedContractMethod<[initialOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'revision'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'tokens',
  ): TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'transferOwnership',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  getEvent(
    key: 'Initialized',
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: 'Lens_Token_ERC1155Created',
  ): TypedContractEvent<
    Lens_Token_ERC1155CreatedEvent.InputTuple,
    Lens_Token_ERC1155CreatedEvent.OutputTuple,
    Lens_Token_ERC1155CreatedEvent.OutputObject
  >;
  getEvent(
    key: 'Lens_Token_ERC20Created',
  ): TypedContractEvent<
    Lens_Token_ERC20CreatedEvent.InputTuple,
    Lens_Token_ERC20CreatedEvent.OutputTuple,
    Lens_Token_ERC20CreatedEvent.OutputObject
  >;
  getEvent(
    key: 'Lens_Token_ERC721Created',
  ): TypedContractEvent<
    Lens_Token_ERC721CreatedEvent.InputTuple,
    Lens_Token_ERC721CreatedEvent.OutputTuple,
    Lens_Token_ERC721CreatedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'Lens_Token_ERC1155Created(address,address,string,uint256,uint256)': TypedContractEvent<
      Lens_Token_ERC1155CreatedEvent.InputTuple,
      Lens_Token_ERC1155CreatedEvent.OutputTuple,
      Lens_Token_ERC1155CreatedEvent.OutputObject
    >;
    Lens_Token_ERC1155Created: TypedContractEvent<
      Lens_Token_ERC1155CreatedEvent.InputTuple,
      Lens_Token_ERC1155CreatedEvent.OutputTuple,
      Lens_Token_ERC1155CreatedEvent.OutputObject
    >;

    'Lens_Token_ERC20Created(address,address,string,string,uint8,string,uint256,uint256)': TypedContractEvent<
      Lens_Token_ERC20CreatedEvent.InputTuple,
      Lens_Token_ERC20CreatedEvent.OutputTuple,
      Lens_Token_ERC20CreatedEvent.OutputObject
    >;
    Lens_Token_ERC20Created: TypedContractEvent<
      Lens_Token_ERC20CreatedEvent.InputTuple,
      Lens_Token_ERC20CreatedEvent.OutputTuple,
      Lens_Token_ERC20CreatedEvent.OutputObject
    >;

    'Lens_Token_ERC721Created(address,address,string,string,string,uint256,uint256)': TypedContractEvent<
      Lens_Token_ERC721CreatedEvent.InputTuple,
      Lens_Token_ERC721CreatedEvent.OutputTuple,
      Lens_Token_ERC721CreatedEvent.OutputObject
    >;
    Lens_Token_ERC721Created: TypedContractEvent<
      Lens_Token_ERC721CreatedEvent.InputTuple,
      Lens_Token_ERC721CreatedEvent.OutputTuple,
      Lens_Token_ERC721CreatedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
