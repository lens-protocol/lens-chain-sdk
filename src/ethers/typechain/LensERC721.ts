/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common';

export declare namespace LensERC721 {
  export type TokenParamsStruct = {
    name: string;
    symbol: string;
    iconURI: string;
    maxSupply: BigNumberish;
    mintRate: BigNumberish;
  };

  export type TokenParamsStructOutput = [
    name: string,
    symbol: string,
    iconURI: string,
    maxSupply: bigint,
    mintRate: bigint,
  ] & {
    name: string;
    symbol: string;
    iconURI: string;
    maxSupply: bigint;
    mintRate: bigint;
  };
}

export declare namespace BaseToken {
  export type MinterStruct = { addr: AddressLike; label: string };

  export type MinterStructOutput = [addr: string, label: string] & {
    addr: string;
    label: string;
  };
}

export declare namespace Administered {
  export type AdminStatusChangeParamStruct = {
    addr: AddressLike;
    isAdmin: boolean;
  };

  export type AdminStatusChangeParamStructOutput = [addr: string, isAdmin: boolean] & {
    addr: string;
    isAdmin: boolean;
  };
}

export declare namespace TokenWithDetails {
  export type TokenDetailsStruct = {
    name: string;
    symbol: string;
    iconURI: string;
  };

  export type TokenDetailsStructOutput = [name: string, symbol: string, iconURI: string] & {
    name: string;
    symbol: string;
    iconURI: string;
  };
}

export interface LensERC721Interface extends Interface {
  getFunction(
    nameOrSignature:
      | 'MINT_RATE_COOLDOWN'
      | 'addMinters'
      | 'approve'
      | 'balanceOf'
      | 'canAdmin'
      | 'getApproved'
      | 'iconURI'
      | 'isApprovedForAll'
      | 'isMinter'
      | 'leaveAsAdmin'
      | 'maxSupply'
      | 'mintRate'
      | 'mintRateCooldownEnd'
      | 'name'
      | 'owner'
      | 'ownerOf'
      | 'removeMinters'
      | 'renounceOwnership'
      | 'revision'
      | 'safeMint'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setAdmins'
      | 'setApprovalForAll'
      | 'setMaxSupply'
      | 'setMintRate'
      | 'supportsInterface'
      | 'symbol'
      | 'tokenURI'
      | 'totalSupply'
      | 'transferFrom'
      | 'transferOwnership'
      | 'updateDetails',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'AdminStatusChanged'
      | 'Approval'
      | 'ApprovalForAll'
      | 'BatchMetadataUpdate'
      | 'Lens_Token_AdminStatusChanged'
      | 'Lens_Token_DetailsUpdated'
      | 'Lens_Token_ERC721Transfer'
      | 'Lens_Token_MaxSupplyUpdated'
      | 'Lens_Token_MintRateChanged'
      | 'Lens_Token_MinterAdded'
      | 'Lens_Token_MinterRemoved'
      | 'Lens_Token_OwnershipTransferred'
      | 'MetadataUpdate'
      | 'OwnershipTransferred'
      | 'Transfer',
  ): EventFragment;

  encodeFunctionData(functionFragment: 'MINT_RATE_COOLDOWN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addMinters', values: [BaseToken.MinterStruct[]]): string;
  encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'canAdmin', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'iconURI', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [AddressLike, AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'isMinter', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'leaveAsAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintRateCooldownEnd', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'removeMinters', values: [AddressLike[]]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'revision', values?: undefined): string;
  encodeFunctionData(functionFragment: 'safeMint', values: [AddressLike, string]): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [AddressLike, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [AddressLike, AddressLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setAdmins',
    values: [Administered.AdminStatusChangeParamStruct[]],
  ): string;
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [AddressLike, boolean]): string;
  encodeFunctionData(functionFragment: 'setMaxSupply', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setMintRate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [AddressLike, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'updateDetails',
    values: [TokenWithDetails.TokenDetailsStruct],
  ): string;

  decodeFunctionResult(functionFragment: 'MINT_RATE_COOLDOWN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addMinters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'iconURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isMinter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'leaveAsAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintRateCooldownEnd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeMinters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revision', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeMint', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setAdmins', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMintRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDetails', data: BytesLike): Result;
}

export namespace AdminStatusChangedEvent {
  export type InputTuple = [admin: AddressLike, newStatus: boolean];
  export type OutputTuple = [admin: string, newStatus: boolean];
  export interface OutputObject {
    admin: string;
    newStatus: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [owner: AddressLike, approved: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [owner: AddressLike, operator: AddressLike, approved: boolean];
  export type OutputTuple = [owner: string, operator: string, approved: boolean];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [_fromTokenId: BigNumberish, _toTokenId: BigNumberish];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Lens_Token_AdminStatusChangedEvent {
  export type InputTuple = [addr: AddressLike, newStatus: boolean];
  export type OutputTuple = [addr: string, newStatus: boolean];
  export interface OutputObject {
    addr: string;
    newStatus: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Lens_Token_DetailsUpdatedEvent {
  export type InputTuple = [name: string, symbol: string, iconURI: string];
  export type OutputTuple = [name: string, symbol: string, iconURI: string];
  export interface OutputObject {
    name: string;
    symbol: string;
    iconURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Lens_Token_ERC721TransferEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Lens_Token_MaxSupplyUpdatedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Lens_Token_MintRateChangedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Lens_Token_MinterAddedEvent {
  export type InputTuple = [minter: AddressLike, label: string];
  export type OutputTuple = [minter: string, label: string];
  export interface OutputObject {
    minter: string;
    label: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Lens_Token_MinterRemovedEvent {
  export type InputTuple = [minter: AddressLike];
  export type OutputTuple = [minter: string];
  export interface OutputObject {
    minter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Lens_Token_OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LensERC721 extends BaseContract {
  connect(runner?: ContractRunner | null): LensERC721;
  waitForDeployment(): Promise<this>;

  interface: LensERC721Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  MINT_RATE_COOLDOWN: TypedContractMethod<[], [bigint], 'view'>;

  addMinters: TypedContractMethod<[minters_: BaseToken.MinterStruct[]], [void], 'nonpayable'>;

  approve: TypedContractMethod<[to: AddressLike, tokenId: BigNumberish], [void], 'nonpayable'>;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;

  canAdmin: TypedContractMethod<[user: AddressLike], [boolean], 'view'>;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;

  iconURI: TypedContractMethod<[], [string], 'view'>;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    'view'
  >;

  isMinter: TypedContractMethod<[addr: AddressLike], [boolean], 'view'>;

  leaveAsAdmin: TypedContractMethod<[], [void], 'nonpayable'>;

  maxSupply: TypedContractMethod<[], [bigint], 'view'>;

  mintRate: TypedContractMethod<[], [bigint], 'view'>;

  mintRateCooldownEnd: TypedContractMethod<[], [bigint], 'view'>;

  name: TypedContractMethod<[], [string], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;

  removeMinters: TypedContractMethod<[minters_: AddressLike[]], [void], 'nonpayable'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  revision: TypedContractMethod<[], [bigint], 'view'>;

  safeMint: TypedContractMethod<[to: AddressLike, uri: string], [void], 'payable'>;

  'safeTransferFrom(address,address,uint256)': TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    'nonpayable'
  >;

  'safeTransferFrom(address,address,uint256,bytes)': TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike],
    [void],
    'nonpayable'
  >;

  setAdmins: TypedContractMethod<
    [_admins: Administered.AdminStatusChangeParamStruct[]],
    [void],
    'nonpayable'
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    'nonpayable'
  >;

  setMaxSupply: TypedContractMethod<[newMaxSupply: BigNumberish], [void], 'nonpayable'>;

  setMintRate: TypedContractMethod<[newMintRate: BigNumberish], [void], 'nonpayable'>;

  supportsInterface: TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;

  symbol: TypedContractMethod<[], [string], 'view'>;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;

  totalSupply: TypedContractMethod<[], [bigint], 'view'>;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    'nonpayable'
  >;

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  updateDetails: TypedContractMethod<
    [details: TokenWithDetails.TokenDetailsStruct],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'MINT_RATE_COOLDOWN'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'addMinters',
  ): TypedContractMethod<[minters_: BaseToken.MinterStruct[]], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'approve',
  ): TypedContractMethod<[to: AddressLike, tokenId: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'balanceOf',
  ): TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'canAdmin',
  ): TypedContractMethod<[user: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'getApproved',
  ): TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;
  getFunction(nameOrSignature: 'iconURI'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'isApprovedForAll',
  ): TypedContractMethod<[owner: AddressLike, operator: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isMinter',
  ): TypedContractMethod<[addr: AddressLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'leaveAsAdmin'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'maxSupply'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'mintRate'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'mintRateCooldownEnd'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'name'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'ownerOf',
  ): TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'removeMinters',
  ): TypedContractMethod<[minters_: AddressLike[]], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'revision'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'safeMint',
  ): TypedContractMethod<[to: AddressLike, uri: string], [void], 'payable'>;
  getFunction(
    nameOrSignature: 'safeTransferFrom(address,address,uint256)',
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'safeTransferFrom(address,address,uint256,bytes)',
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setAdmins',
  ): TypedContractMethod<
    [_admins: Administered.AdminStatusChangeParamStruct[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setApprovalForAll',
  ): TypedContractMethod<[operator: AddressLike, approved: boolean], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setMaxSupply',
  ): TypedContractMethod<[newMaxSupply: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setMintRate',
  ): TypedContractMethod<[newMintRate: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'supportsInterface',
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'symbol'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'tokenURI',
  ): TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;
  getFunction(nameOrSignature: 'totalSupply'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'transferFrom',
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferOwnership',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateDetails',
  ): TypedContractMethod<[details: TokenWithDetails.TokenDetailsStruct], [void], 'nonpayable'>;

  getEvent(
    key: 'AdminStatusChanged',
  ): TypedContractEvent<
    AdminStatusChangedEvent.InputTuple,
    AdminStatusChangedEvent.OutputTuple,
    AdminStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: 'Approval',
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: 'ApprovalForAll',
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: 'BatchMetadataUpdate',
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: 'Lens_Token_AdminStatusChanged',
  ): TypedContractEvent<
    Lens_Token_AdminStatusChangedEvent.InputTuple,
    Lens_Token_AdminStatusChangedEvent.OutputTuple,
    Lens_Token_AdminStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: 'Lens_Token_DetailsUpdated',
  ): TypedContractEvent<
    Lens_Token_DetailsUpdatedEvent.InputTuple,
    Lens_Token_DetailsUpdatedEvent.OutputTuple,
    Lens_Token_DetailsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Lens_Token_ERC721Transfer',
  ): TypedContractEvent<
    Lens_Token_ERC721TransferEvent.InputTuple,
    Lens_Token_ERC721TransferEvent.OutputTuple,
    Lens_Token_ERC721TransferEvent.OutputObject
  >;
  getEvent(
    key: 'Lens_Token_MaxSupplyUpdated',
  ): TypedContractEvent<
    Lens_Token_MaxSupplyUpdatedEvent.InputTuple,
    Lens_Token_MaxSupplyUpdatedEvent.OutputTuple,
    Lens_Token_MaxSupplyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Lens_Token_MintRateChanged',
  ): TypedContractEvent<
    Lens_Token_MintRateChangedEvent.InputTuple,
    Lens_Token_MintRateChangedEvent.OutputTuple,
    Lens_Token_MintRateChangedEvent.OutputObject
  >;
  getEvent(
    key: 'Lens_Token_MinterAdded',
  ): TypedContractEvent<
    Lens_Token_MinterAddedEvent.InputTuple,
    Lens_Token_MinterAddedEvent.OutputTuple,
    Lens_Token_MinterAddedEvent.OutputObject
  >;
  getEvent(
    key: 'Lens_Token_MinterRemoved',
  ): TypedContractEvent<
    Lens_Token_MinterRemovedEvent.InputTuple,
    Lens_Token_MinterRemovedEvent.OutputTuple,
    Lens_Token_MinterRemovedEvent.OutputObject
  >;
  getEvent(
    key: 'Lens_Token_OwnershipTransferred',
  ): TypedContractEvent<
    Lens_Token_OwnershipTransferredEvent.InputTuple,
    Lens_Token_OwnershipTransferredEvent.OutputTuple,
    Lens_Token_OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'MetadataUpdate',
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'Transfer',
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    'AdminStatusChanged(address,bool)': TypedContractEvent<
      AdminStatusChangedEvent.InputTuple,
      AdminStatusChangedEvent.OutputTuple,
      AdminStatusChangedEvent.OutputObject
    >;
    AdminStatusChanged: TypedContractEvent<
      AdminStatusChangedEvent.InputTuple,
      AdminStatusChangedEvent.OutputTuple,
      AdminStatusChangedEvent.OutputObject
    >;

    'Approval(address,address,uint256)': TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    'ApprovalForAll(address,address,bool)': TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    'BatchMetadataUpdate(uint256,uint256)': TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    'Lens_Token_AdminStatusChanged(address,bool)': TypedContractEvent<
      Lens_Token_AdminStatusChangedEvent.InputTuple,
      Lens_Token_AdminStatusChangedEvent.OutputTuple,
      Lens_Token_AdminStatusChangedEvent.OutputObject
    >;
    Lens_Token_AdminStatusChanged: TypedContractEvent<
      Lens_Token_AdminStatusChangedEvent.InputTuple,
      Lens_Token_AdminStatusChangedEvent.OutputTuple,
      Lens_Token_AdminStatusChangedEvent.OutputObject
    >;

    'Lens_Token_DetailsUpdated(string,string,string)': TypedContractEvent<
      Lens_Token_DetailsUpdatedEvent.InputTuple,
      Lens_Token_DetailsUpdatedEvent.OutputTuple,
      Lens_Token_DetailsUpdatedEvent.OutputObject
    >;
    Lens_Token_DetailsUpdated: TypedContractEvent<
      Lens_Token_DetailsUpdatedEvent.InputTuple,
      Lens_Token_DetailsUpdatedEvent.OutputTuple,
      Lens_Token_DetailsUpdatedEvent.OutputObject
    >;

    'Lens_Token_ERC721Transfer(address,address,uint256)': TypedContractEvent<
      Lens_Token_ERC721TransferEvent.InputTuple,
      Lens_Token_ERC721TransferEvent.OutputTuple,
      Lens_Token_ERC721TransferEvent.OutputObject
    >;
    Lens_Token_ERC721Transfer: TypedContractEvent<
      Lens_Token_ERC721TransferEvent.InputTuple,
      Lens_Token_ERC721TransferEvent.OutputTuple,
      Lens_Token_ERC721TransferEvent.OutputObject
    >;

    'Lens_Token_MaxSupplyUpdated(uint256)': TypedContractEvent<
      Lens_Token_MaxSupplyUpdatedEvent.InputTuple,
      Lens_Token_MaxSupplyUpdatedEvent.OutputTuple,
      Lens_Token_MaxSupplyUpdatedEvent.OutputObject
    >;
    Lens_Token_MaxSupplyUpdated: TypedContractEvent<
      Lens_Token_MaxSupplyUpdatedEvent.InputTuple,
      Lens_Token_MaxSupplyUpdatedEvent.OutputTuple,
      Lens_Token_MaxSupplyUpdatedEvent.OutputObject
    >;

    'Lens_Token_MintRateChanged(uint256)': TypedContractEvent<
      Lens_Token_MintRateChangedEvent.InputTuple,
      Lens_Token_MintRateChangedEvent.OutputTuple,
      Lens_Token_MintRateChangedEvent.OutputObject
    >;
    Lens_Token_MintRateChanged: TypedContractEvent<
      Lens_Token_MintRateChangedEvent.InputTuple,
      Lens_Token_MintRateChangedEvent.OutputTuple,
      Lens_Token_MintRateChangedEvent.OutputObject
    >;

    'Lens_Token_MinterAdded(address,string)': TypedContractEvent<
      Lens_Token_MinterAddedEvent.InputTuple,
      Lens_Token_MinterAddedEvent.OutputTuple,
      Lens_Token_MinterAddedEvent.OutputObject
    >;
    Lens_Token_MinterAdded: TypedContractEvent<
      Lens_Token_MinterAddedEvent.InputTuple,
      Lens_Token_MinterAddedEvent.OutputTuple,
      Lens_Token_MinterAddedEvent.OutputObject
    >;

    'Lens_Token_MinterRemoved(address)': TypedContractEvent<
      Lens_Token_MinterRemovedEvent.InputTuple,
      Lens_Token_MinterRemovedEvent.OutputTuple,
      Lens_Token_MinterRemovedEvent.OutputObject
    >;
    Lens_Token_MinterRemoved: TypedContractEvent<
      Lens_Token_MinterRemovedEvent.InputTuple,
      Lens_Token_MinterRemovedEvent.OutputTuple,
      Lens_Token_MinterRemovedEvent.OutputObject
    >;

    'Lens_Token_OwnershipTransferred(address,address)': TypedContractEvent<
      Lens_Token_OwnershipTransferredEvent.InputTuple,
      Lens_Token_OwnershipTransferredEvent.OutputTuple,
      Lens_Token_OwnershipTransferredEvent.OutputObject
    >;
    Lens_Token_OwnershipTransferred: TypedContractEvent<
      Lens_Token_OwnershipTransferredEvent.InputTuple,
      Lens_Token_OwnershipTransferredEvent.OutputTuple,
      Lens_Token_OwnershipTransferredEvent.OutputObject
    >;

    'MetadataUpdate(uint256)': TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'Transfer(address,address,uint256)': TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
